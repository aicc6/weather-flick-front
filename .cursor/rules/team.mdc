---
description: Weather Flick Frontend Development Rules
globs: ["**/*.js", "**/*.jsx", "**/*.ts", "**/*.tsx", "**/*.css", "**/*.scss", "**/*.json"]
alwaysApply: true
---

# Weather Flick Frontend Team Rules

당신은 Weather Flick 프론트엔드 개발의 전문가입니다. React 18, Vite, TailwindCSS, 그리고 현대적인 UI/UX 프레임워크에 능숙합니다.

## 🎯 프로젝트 컨텍스트

이 파일은 Weather Flick 사용자 웹 애플리케이션의 특화 규칙입니다. 전역 규칙은 워크스페이스 규칙을 참조하세요.

### 역할 및 책임
- **사용자 웹 애플리케이션**: React 18 기반 여행 날씨 서비스 (포트: 5173)
- **여행 플래너**: 날씨 기반 여행지 추천 및 계획 도구
- **반응형 디자인**: 모바일, 태블릿, 데스크탑 최적화
- **사용자 인터랙션**: 지도 연동, 실시간 날씨, 소셜 로그인

### 기술 스택 (워크스페이스 표준 준수)
- **Framework**: React 18.3.1 + Vite 6.3.5
- **Styling**: TailwindCSS 4.1.10
- **UI Components**: shadcn/ui + Radix UI
- **Router**: React Router DOM 7.6.2
- **State**: Redux Toolkit 2.8.2 + RTK Query (API 상태 관리)
- **Forms**: React Hook Form 7.58.1 + Zod 3.25.67

## 📁 필수 프로젝트 구조

```
src/
├── components/            # 재사용 가능한 컴포넌트
│   ├── ui/               # shadcn/ui 컴포넌트 (25개)
│   ├── common/           # 공통 컴포넌트 (3개)
│   ├── planner/          # 플래너 전용 컴포넌트
│   └── icons/            # 커스텀 아이콘 (2개)
├── pages/                # 페이지 컴포넌트 (27개)
│   ├── auth/             # 인증 관련 페이지
│   ├── planner/          # 여행 계획 페이지
│   ├── recommend/        # 추천 관련 페이지
│   └── profile/          # 프로필 관련 페이지
├── layouts/              # 레이아웃 컴포넌트
├── contexts/             # React Context (인증 등)
├── hooks/                # 커스텀 훅 (6개)
├── store/                # Redux Store + RTK Query APIs
│   ├── api/              # RTK Query API 모듈 (5개)
│   └── index.js          # Store 설정
├── utils/                # 유틸리티 함수
├── data/                 # 정적 데이터 (5개)
├── schemas/              # Zod 스키마 (2개)
└── constants/            # 상수 정의
```

## 🛠️ 핵심 개발 원칙

### 1. 컴포넌트 작성 패턴 (필수 준수)

```jsx
import React, { memo, useCallback, useMemo } from 'react'
import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'

/**
 * 사용자 프로필 카드 컴포넌트
 * 
 * @param {Object} props - 컴포넌트 props
 * @param {Object} props.user - 사용자 정보
 * @param {string} props.className - 추가 CSS 클래스
 * @param {Function} props.onEdit - 편집 버튼 클릭 핸들러
 * @returns {JSX.Element} 사용자 프로필 카드
 */
const UserProfileCard = memo(({ 
  user, 
  className, 
  onEdit,
  ...props 
}) => {
  // Early Return - 입력 검증
  if (!user) {
    return <div className="text-center text-gray-500">사용자 정보가 없습니다</div>
  }

  // 이벤트 핸들러 메모이제이션 (필수)
  const handleEditClick = useCallback(() => {
    onEdit?.(user)
  }, [user, onEdit])

  const handleKeyDown = useCallback((event) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault()
      handleEditClick()
    }
  }, [handleEditClick])

  // 계산된 값 메모이제이션 (필수)
  const displayName = useMemo(() => {
    return user.nickname || user.email?.split('@')[0] || '이름 없음'
  }, [user.nickname, user.email])

  const avatarInitials = useMemo(() => {
    return displayName.charAt(0).toUpperCase()
  }, [displayName])

  // 메인 렌더링
  return (
    <div 
      className={cn(
        "flex items-center space-x-4 rounded-lg border bg-card p-4 shadow-sm",
        "transition-all duration-200 hover:shadow-md",
        className
      )}
      {...props}
    >
      {/* 아바타 */}
      <div className="flex h-12 w-12 items-center justify-center rounded-full bg-primary/10 text-primary">
        {user.profileImage ? (
          <img
            src={user.profileImage}
            alt={`${displayName} 프로필`}
            className="h-full w-full rounded-full object-cover"
            loading="lazy"
          />
        ) : (
          <span className="text-lg font-semibold">{avatarInitials}</span>
        )}
      </div>

      {/* 사용자 정보 */}
      <div className="flex-1 min-w-0">
        <h3 className="truncate text-lg font-semibold">{displayName}</h3>
        <p className="truncate text-sm text-muted-foreground">{user.email}</p>
        {user.isVerified && (
          <span className="inline-flex items-center rounded-full bg-green-100 px-2 py-1 text-xs text-green-800">
            인증됨
          </span>
        )}
      </div>

      {/* 편집 버튼 */}
      <Button
        variant="outline"
        size="sm"
        onClick={handleEditClick}
        onKeyDown={handleKeyDown}
        aria-label={`${displayName} 프로필 편집`}
        tabIndex={0}
      >
        편집
      </Button>
    </div>
  )
})

// 컴포넌트 displayName 설정 (필수)
UserProfileCard.displayName = 'UserProfileCard'

export default UserProfileCard
```

### 2. 페이지 컴포넌트 패턴 (코드 분할 필수)

```jsx
// pages/planner/index.jsx
import React, { lazy, Suspense } from 'react'
import { ErrorBoundary } from 'react-error-boundary'
import LoadingSpinner from '@/components/common/LoadingSpinner'
import ErrorFallback from '@/components/common/ErrorFallback'

// 지연 로딩으로 성능 최적화 (필수)
const PlannerForm = lazy(() => import('./PlannerForm'))
const WeatherPreview = lazy(() => import('./WeatherPreview'))
const PlanRecommendation = lazy(() => import('./PlanRecommendation'))

const PlannerPage = () => {
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mx-auto max-w-4xl space-y-8">
        {/* 페이지 헤더 */}
        <header className="text-center">
          <h1 className="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">
            여행 계획 세우기
          </h1>
          <p className="mt-2 text-lg text-gray-600">
            날씨를 고려한 완벽한 여행 계획을 세워보세요
          </p>
        </header>

        {/* 메인 콘텐츠 */}
        <main className="grid gap-8 lg:grid-cols-2">
          {/* 플래너 폼 */}
          <ErrorBoundary
            FallbackComponent={ErrorFallback}
            onError={(error) => console.error('PlannerForm 오류:', error)}
          >
            <Suspense fallback={<LoadingSpinner />}>
              <PlannerForm />
            </Suspense>
          </ErrorBoundary>

          {/* 날씨 미리보기 */}
          <ErrorBoundary
            FallbackComponent={ErrorFallback}
            onError={(error) => console.error('WeatherPreview 오류:', error)}
          >
            <Suspense fallback={<LoadingSpinner />}>
              <WeatherPreview />
            </Suspense>
          </ErrorBoundary>
        </main>

        {/* 추천 섹션 */}
        <section>
          <ErrorBoundary
            FallbackComponent={ErrorFallback}
            onError={(error) => console.error('PlanRecommendation 오류:', error)}
          >
            <Suspense fallback={<LoadingSpinner />}>
              <PlanRecommendation />
            </Suspense>
          </ErrorBoundary>
        </section>
      </div>
    </div>
  )
}

export default PlannerPage
```

### 3. 커스텀 훅 패턴 (필수)

```jsx
// hooks/useDestinationSearch.js
import { useState, useCallback, useEffect, useMemo } from 'react'
import { useDebounce } from './useDebounce'
import * as api from '@/services/api'

/**
 * 여행지 검색 커스텀 훅
 * 
 * @param {string} initialQuery - 초기 검색어
 * @returns {Object} 검색 상태 및 함수들
 */
export const useDestinationSearch = (initialQuery = '') => {
  // 상태 관리
  const [query, setQuery] = useState(initialQuery)
  const [destinations, setDestinations] = useState([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)

  // 디바운스 적용 (성능 최적화)
  const debouncedQuery = useDebounce(query, 300)

  // 검색 함수 (메모이제이션 필수)
  const searchDestinations = useCallback(async (searchTerm) => {
    // Early Return - 빈 검색어 처리
    if (!searchTerm.trim()) {
      setDestinations([])
      return
    }

    try {
      setLoading(true)
      setError(null)

      const response = await api.searchDestinations({
        query: searchTerm,
        limit: 10
      })

      setDestinations(response.data || [])
    } catch (err) {
      setError(err.message || '검색 중 오류가 발생했습니다')
      setDestinations([])
    } finally {
      setLoading(false)
    }
  }, [])

  // 디바운스된 검색 실행
  useEffect(() => {
    searchDestinations(debouncedQuery)
  }, [debouncedQuery, searchDestinations])

  // 검색어 업데이트 함수
  const updateQuery = useCallback((newQuery) => {
    setQuery(newQuery)
  }, [])

  // 검색 초기화 함수
  const clearSearch = useCallback(() => {
    setQuery('')
    setDestinations([])
    setError(null)
  }, [])

  // 필터링된 결과 (메모이제이션)
  const filteredDestinations = useMemo(() => {
    return destinations.filter(dest => dest.isActive)
  }, [destinations])

  return {
    // 상태
    query,
    destinations: filteredDestinations,
    loading,
    error,
    
    // 함수
    updateQuery,
    clearSearch,
    searchDestinations,
    
    // 계산된 값
    hasResults: filteredDestinations.length > 0,
    isEmpty: !loading && filteredDestinations.length === 0 && query.trim()
  }
}
```

### 4. 폼 처리 패턴 (React Hook Form + Zod)

```jsx
// components/auth/LoginForm.jsx
import React, { memo, useCallback } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import * as z from 'zod'

import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { useAuth } from '@/contexts/AuthContext'

// Zod 스키마 정의 (필수)
const loginSchema = z.object({
  email: z
    .string()
    .min(1, '이메일을 입력해주세요')
    .email('올바른 이메일 형식이 아닙니다'),
  password: z
    .string()
    .min(1, '비밀번호를 입력해주세요')
    .min(8, '비밀번호는 8자 이상이어야 합니다'),
})

const LoginForm = memo(({ onSuccess, className }) => {
  const { login } = useAuth()

  // React Hook Form 설정
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    setError,
    reset
  } = useForm({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: '',
      password: ''
    }
  })

  // 폼 제출 핸들러
  const handleFormSubmit = useCallback(async (data) => {
    try {
      await login(data)
      reset()
      onSuccess?.()
    } catch (error) {
      // 서버 오류를 폼에 표시
      if (error.message.includes('이메일')) {
        setError('email', { message: error.message })
      } else if (error.message.includes('비밀번호')) {
        setError('password', { message: error.message })
      } else {
        setError('root', { message: error.message })
      }
    }
  }, [login, reset, onSuccess, setError])

  return (
    <form 
      onSubmit={handleSubmit(handleFormSubmit)}
      className={cn("space-y-4", className)}
      noValidate
    >
      {/* 전역 오류 메시지 */}
      {errors.root && (
        <div className="rounded-md bg-red-50 p-3 text-sm text-red-800">
          {errors.root.message}
        </div>
      )}

      {/* 이메일 필드 */}
      <div className="space-y-2">
        <Label htmlFor="email">이메일</Label>
        <Input
          id="email"
          type="email"
          placeholder="이메일을 입력하세요"
          autoComplete="email"
          aria-invalid={!!errors.email}
          aria-describedby={errors.email ? "email-error" : undefined}
          {...register('email')}
        />
        {errors.email && (
          <p id="email-error" className="text-sm text-red-600">
            {errors.email.message}
          </p>
        )}
      </div>

      {/* 비밀번호 필드 */}
      <div className="space-y-2">
        <Label htmlFor="password">비밀번호</Label>
        <Input
          id="password"
          type="password"
          placeholder="비밀번호를 입력하세요"
          autoComplete="current-password"
          aria-invalid={!!errors.password}
          aria-describedby={errors.password ? "password-error" : undefined}
          {...register('password')}
        />
        {errors.password && (
          <p id="password-error" className="text-sm text-red-600">
            {errors.password.message}
          </p>
        )}
      </div>

      {/* 제출 버튼 */}
      <Button
        type="submit"
        className="w-full"
        disabled={isSubmitting}
        aria-label={isSubmitting ? "로그인 처리 중" : "로그인"}
      >
        {isSubmitting ? '로그인 중...' : '로그인'}
      </Button>
    </form>
  )
})

LoginForm.displayName = 'LoginForm'

export default LoginForm
```

### 6. RTK Query API 패턴 (필수 사용)

**⚠️ 중요: 모든 HTTP 요청은 RTK Query를 사용해야 합니다. fetch, axios 등 직접 사용 금지**

```jsx
// store/api/destinationsApi.js
import { createApi } from '@reduxjs/toolkit/query/react'
import { baseQueryWithReauth } from './baseQuery'

export const destinationsApi = createApi({
  reducerPath: 'destinationsApi',
  baseQuery: baseQueryWithReauth,
  tagTypes: ['Destination'],
  endpoints: (builder) => ({
    // 목적지 검색 (백엔드 스펙 준수)
    searchDestinations: builder.query({
      query: ({ query, limit = 10 }) => ({
        url: 'destinations/search',
        params: { query, limit },
      }),
      providesTags: (result, error, { query }) => [
        { type: 'Destination', id: `search-${query}` },
      ],
      keepUnusedDataFor: 300, // 5분간 캐싱
      transformResponse: (response) => {
        // 백엔드 응답 구조: { suggestions: [...] }
        return response.suggestions || []
      },
    }),

    // 지역별 목적지 조회
    getDestinationsByRegion: builder.query({
      query: ({ regionCode, page = 1, limit = 20 }) => ({
        url: `destinations/region/${regionCode}`,
        params: { page, limit },
      }),
      providesTags: (result, error, { regionCode }) => [
        { type: 'Destination', id: `region-${regionCode}` },
      ],
      keepUnusedDataFor: 600, // 10분간 캐싱
      serializeQueryArgs: ({ queryArgs }) => {
        // 페이지네이션을 위한 직렬화
        const { regionCode, ...params } = queryArgs
        return { regionCode, params }
      },
      merge: (currentCache, newItems, { arg }) => {
        // 페이지네이션 병합 로직
        if (arg.page === 1) {
          return newItems
        }
        return [...currentCache, ...newItems]
      },
      forceRefetch: ({ currentArg, previousArg }) => {
        return currentArg?.page !== previousArg?.page
      },
    }),

    // 목적지 상세 정보
    getDestinationDetail: builder.query({
      query: (destinationId) => `destinations/${destinationId}`,
      providesTags: (result, error, destinationId) => [
        { type: 'Destination', id: destinationId },
      ],
      keepUnusedDataFor: 1800, // 30분간 캐싱
    }),
  }),
})

// Hook 내보내기 (필수)
export const {
  useSearchDestinationsQuery,
  useGetDestinationsByRegionQuery,
  useGetDestinationDetailQuery,
} = destinationsApi
```

#### RTK Query 컴포넌트 사용 패턴

```jsx
// components/DestinationSearch.jsx
import React, { memo, useState, useCallback } from 'react'
import { useSearchDestinationsQuery } from '@/store/api'
import { useDebounce } from '@/hooks/useDebounce'

const DestinationSearch = memo(({ onSelect, className }) => {
  const [query, setQuery] = useState('')
  const debouncedQuery = useDebounce(query, 300)

  // RTK Query 훅 사용 (필수 패턴)
  const {
    data: destinations = [],
    error,
    isLoading,
    isFetching,
  } = useSearchDestinationsQuery(
    { query: debouncedQuery, limit: 10 },
    {
      // 빈 검색어일 때 요청 건너뛰기
      skip: !debouncedQuery.trim(),
      // 실시간 검색을 위한 폴링 (옵션)
      pollingInterval: 0,
      // 캐시 데이터 사용 설정
      refetchOnMountOrArgChange: 30, // 30초 후 재요청
    }
  )

  const handleInputChange = useCallback((e) => {
    setQuery(e.target.value)
  }, [])

  const handleDestinationSelect = useCallback((destination) => {
    onSelect?.(destination)
    setQuery('')
  }, [onSelect])

  // 로딩 상태 처리
  if (isLoading) {
    return <div className="text-center">검색 중...</div>
  }

  // 에러 처리
  if (error) {
    return (
      <div className="rounded-md bg-red-50 p-3 text-red-800">
        검색 중 오류가 발생했습니다: {error.message}
      </div>
    )
  }

  return (
    <div className={cn("relative", className)}>
      <Input
        value={query}
        onChange={handleInputChange}
        placeholder="목적지를 검색하세요"
        className="w-full"
      />
      
      {/* 로딩 인디케이터 (백그라운드 요청) */}
      {isFetching && (
        <div className="absolute right-3 top-1/2 -translate-y-1/2">
          <div className="h-4 w-4 animate-spin rounded-full border-2 border-blue-600 border-t-transparent" />
        </div>
      )}

      {/* 검색 결과 */}
      {destinations.length > 0 && (
        <div className="absolute top-full z-10 mt-1 w-full rounded-md border bg-white shadow-lg">
          {destinations.map((destination) => (
            <button
              key={destination.place_id}
              onClick={() => handleDestinationSelect(destination)}
              className="w-full px-4 py-2 text-left hover:bg-gray-50"
            >
              <div className="font-medium">{destination.description}</div>
              {destination.photo_url && (
                <img
                  src={destination.photo_url}
                  alt={destination.description}
                  className="mt-1 h-12 w-20 rounded object-cover"
                  loading="lazy"
                />
              )}
            </button>
          ))}
        </div>
      )}
    </div>
  )
})

DestinationSearch.displayName = 'DestinationSearch'
export default DestinationSearch
```

#### RTK Query Mutation 패턴

```jsx
// components/TravelPlanForm.jsx
import React, { memo, useCallback } from 'react'
import { useForm } from 'react-hook-form'
import { useCreateTravelPlanMutation } from '@/store/api'
import { toast } from 'sonner'

const TravelPlanForm = memo(({ onSuccess }) => {
  const { register, handleSubmit, reset, formState: { errors } } = useForm()

  // RTK Query Mutation 훅 사용
  const [createTravelPlan, { 
    isLoading, 
    error,
    isSuccess,
    isError 
  }] = useCreateTravelPlanMutation()

  const onSubmit = useCallback(async (formData) => {
    try {
      // unwrap()을 사용하여 Promise 형태로 처리 (필수)
      const result = await createTravelPlan(formData).unwrap()
      
      // 성공 처리
      toast.success('여행 계획이 성공적으로 생성되었습니다!')
      reset()
      onSuccess?.(result)
    } catch (error) {
      // 에러 처리 (RTK Query 에러 구조)
      const errorMessage = error.data?.detail || error.message || '생성에 실패했습니다'
      toast.error(errorMessage)
      console.error('여행 계획 생성 오류:', error)
    }
  }, [createTravelPlan, reset, onSuccess])

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      {/* 에러 표시 */}
      {isError && error && (
        <div className="rounded-md bg-red-50 p-3 text-red-800">
          {error.data?.detail || '오류가 발생했습니다'}
        </div>
      )}

      <div>
        <Label htmlFor="title">여행 제목</Label>
        <Input
          id="title"
          {...register('title', { required: '제목을 입력해주세요' })}
          disabled={isLoading}
        />
        {errors.title && (
          <p className="text-sm text-red-600">{errors.title.message}</p>
        )}
      </div>

      <Button
        type="submit"
        disabled={isLoading}
        className="w-full"
      >
        {isLoading ? '생성 중...' : '여행 계획 생성'}
      </Button>
    </form>
  )
})

TravelPlanForm.displayName = 'TravelPlanForm'
export default TravelPlanForm
```

#### RTK Query 최적화 패턴

```jsx
// hooks/useOptimizedDestinations.js
import { useMemo } from 'react'
import { useGetDestinationsByRegionQuery } from '@/store/api'

/**
 * 지역별 목적지 최적화 훅
 * 캐싱, 필터링, 정렬 등 최적화된 데이터 제공
 */
export const useOptimizedDestinations = (regionCode, filters = {}) => {
  const {
    data: rawDestinations = [],
    isLoading,
    error,
    refetch,
  } = useGetDestinationsByRegionQuery(
    { regionCode, ...filters },
    {
      // 지역이 없으면 요청 건너뛰기
      skip: !regionCode,
      // 5분 간격으로 백그라운드 업데이트
      pollingInterval: 300000,
      // 마운트 시 30초 이내 데이터가 있으면 재요청 안함
      refetchOnMountOrArgChange: 30,
    }
  )

  // 필터링 및 정렬된 목적지 (메모이제이션 필수)
  const optimizedDestinations = useMemo(() => {
    if (!rawDestinations?.length) return []

    return rawDestinations
      .filter(dest => {
        // 활성화된 목적지만
        if (!dest.is_active) return false
        
        // 카테고리 필터
        if (filters.category && dest.category !== filters.category) return false
        
        // 평점 필터
        if (filters.minRating && dest.rating < filters.minRating) return false
        
        return true
      })
      .sort((a, b) => {
        // 평점 높은 순으로 정렬
        return b.rating - a.rating
      })
  }, [rawDestinations, filters])

  return {
    destinations: optimizedDestinations,
    isLoading,
    error,
    refetch,
    hasData: optimizedDestinations.length > 0,
    isEmpty: !isLoading && optimizedDestinations.length === 0,
  }
}
```

### 5. Context 최적화 패턴 (필수)

```jsx
// contexts/AuthContext.jsx
import React, { createContext, useContext, useReducer, useCallback, useMemo } from 'react'

// 초기 상태
const initialState = {
  user: null,
  isAuthenticated: false,
  loading: true,
  error: null
}

// 액션 타입
const AuthActionTypes = {
  SET_LOADING: 'SET_LOADING',
  LOGIN_SUCCESS: 'LOGIN_SUCCESS',
  LOGOUT: 'LOGOUT',
  SET_ERROR: 'SET_ERROR',
  CLEAR_ERROR: 'CLEAR_ERROR'
}

// 리듀서 함수
const authReducer = (state, action) => {
  switch (action.type) {
    case AuthActionTypes.SET_LOADING:
      return { ...state, loading: action.payload }
    
    case AuthActionTypes.LOGIN_SUCCESS:
      return {
        ...state,
        user: action.payload,
        isAuthenticated: true,
        loading: false,
        error: null
      }
    
    case AuthActionTypes.LOGOUT:
      return {
        ...initialState,
        loading: false
      }
    
    case AuthActionTypes.SET_ERROR:
      return {
        ...state,
        error: action.payload,
        loading: false
      }
    
    case AuthActionTypes.CLEAR_ERROR:
      return { ...state, error: null }
    
    default:
      return state
  }
}

// Context 생성
const AuthContext = createContext(null)

// Provider 컴포넌트
export const AuthProvider = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, initialState)

  // 액션 생성자들 (메모이제이션 필수)
  const login = useCallback(async (credentials) => {
    try {
      dispatch({ type: AuthActionTypes.SET_LOADING, payload: true })
      dispatch({ type: AuthActionTypes.CLEAR_ERROR })

      const response = await authApi.login(credentials)
      const user = response.data

      // 토큰 저장
      localStorage.setItem('token', user.token)
      
      dispatch({ 
        type: AuthActionTypes.LOGIN_SUCCESS, 
        payload: user 
      })

      return user
    } catch (error) {
      dispatch({ 
        type: AuthActionTypes.SET_ERROR, 
        payload: error.message 
      })
      throw error
    }
  }, [])

  const logout = useCallback(() => {
    localStorage.removeItem('token')
    dispatch({ type: AuthActionTypes.LOGOUT })
  }, [])

  const clearError = useCallback(() => {
    dispatch({ type: AuthActionTypes.CLEAR_ERROR })
  }, [])

  // Context 값 메모이제이션 (필수)
  const value = useMemo(() => ({
    // 상태
    user: state.user,
    isAuthenticated: state.isAuthenticated,
    loading: state.loading,
    error: state.error,
    
    // 액션
    login,
    logout,
    clearError
  }), [state, login, logout, clearError])

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}

// 커스텀 훅
export const useAuth = () => {
  const context = useContext(AuthContext)
  
  if (!context) {
    throw new Error('useAuth는 AuthProvider 내부에서 사용되어야 합니다')
  }
  
  return context
}
```

## 🎨 스타일링 규칙

### 1. TailwindCSS 사용 패턴 (필수)

```jsx
// ✅ 올바른 TailwindCSS 사용
const WeatherCard = ({ weather, className }) => {
  return (
    <div className={cn(
      // 기본 스타일
      "rounded-lg border bg-card p-6 shadow-sm",
      
      // 상태별 스타일
      weather.condition === 'sunny' && "border-yellow-200 bg-yellow-50",
      weather.condition === 'rainy' && "border-blue-200 bg-blue-50",
      weather.condition === 'cloudy' && "border-gray-200 bg-gray-50",
      
      // 인터랙션 스타일
      "transition-all duration-200 hover:shadow-md",
      
      // 반응형 스타일 (Mobile First)
      "text-sm md:text-base",
      "p-4 md:p-6",
      "space-y-2 md:space-y-4",
      
      // 추가 클래스
      className
    )}>
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold">{weather.location}</h3>
        <span className="text-2xl">{weather.icon}</span>
      </div>
      
      <div className="grid grid-cols-2 gap-4 text-sm">
        <div>
          <span className="text-muted-foreground">온도</span>
          <p className="font-medium">{weather.temperature}°C</p>
        </div>
        <div>
          <span className="text-muted-foreground">습도</span>
          <p className="font-medium">{weather.humidity}%</p>
        </div>
      </div>
    </div>
  )
}

// ❌ 잘못된 인라인 스타일 사용
const BadComponent = () => (
  <div style={{ backgroundColor: '#f0f0f0', padding: '16px' }}>
    {/* 인라인 스타일 사용 금지 */}
  </div>
)
```

### 2. 반응형 디자인 패턴 (Mobile First 필수)

```jsx
// ✅ Mobile First 반응형 디자인
const ResponsiveGrid = ({ items }) => {
  return (
    <div className="
      grid grid-cols-1           // 모바일: 1열
      sm:grid-cols-2             // 작은 화면: 2열
      md:grid-cols-3             // 중간 화면: 3열
      lg:grid-cols-4             // 큰 화면: 4열
      xl:grid-cols-5             // 매우 큰 화면: 5열
      gap-4 md:gap-6 lg:gap-8    // 반응형 간격
    ">
      {items.map(item => (
        <div key={item.id} className="
          aspect-square             // 정사각형 비율
          overflow-hidden
          rounded-lg
          bg-gray-100
          transition-transform
          hover:scale-105
        ">
          <img
            src={item.image}
            alt={item.title}
            className="h-full w-full object-cover"
            loading="lazy"
          />
        </div>
      ))}
    </div>
  )
}
```

## 🚨 성능 최적화 규칙 (필수)

### 1. 메모이제이션 규칙

```jsx
// ✅ 모든 컴포넌트에 React.memo 적용 (필수)
const ExpensiveComponent = memo(({ data, onUpdate }) => {
  // ✅ 계산 집약적인 작업은 useMemo 사용 (필수)
  const processedData = useMemo(() => {
    return data.map(item => ({
      ...item,
      calculated: complexCalculation(item)
    }))
  }, [data])

  // ✅ 이벤트 핸들러는 useCallback 사용 (필수)
  const handleItemClick = useCallback((itemId) => {
    onUpdate(itemId)
  }, [onUpdate])

  return (
    <div>
      {processedData.map(item => (
        <ItemCard
          key={item.id}
          item={item}
          onClick={handleItemClick}
        />
      ))}
    </div>
  )
})

ExpensiveComponent.displayName = 'ExpensiveComponent'
```

### 2. 이미지 최적화

```jsx
// ✅ 이미지 지연 로딩 및 최적화
const OptimizedImage = ({ src, alt, className, ...props }) => {
  const [isLoaded, setIsLoaded] = useState(false)
  const [error, setError] = useState(false)

  const handleLoad = useCallback(() => {
    setIsLoaded(true)
  }, [])

  const handleError = useCallback(() => {
    setError(true)
  }, [])

  if (error) {
    return (
      <div className={cn("flex items-center justify-center bg-gray-100", className)}>
        <span className="text-gray-400">이미지를 불러올 수 없습니다</span>
      </div>
    )
  }

  return (
    <div className={cn("relative overflow-hidden", className)}>
      {!isLoaded && (
        <div className="absolute inset-0 animate-pulse bg-gray-200" />
      )}
      <img
        src={src}
        alt={alt}
        loading="lazy"
        decoding="async"
        onLoad={handleLoad}
        onError={handleError}
        className={cn(
          "h-full w-full object-cover transition-opacity duration-300",
          isLoaded ? "opacity-100" : "opacity-0"
        )}
        {...props}
      />
    </div>
  )
}
```

## 🔒 보안 및 접근성 규칙

### 1. 접근성 패턴 (필수)

```jsx
// ✅ 접근성 속성 필수 적용
const AccessibleButton = ({ 
  children, 
  onClick, 
  disabled, 
  ariaLabel,
  className,
  ...props 
}) => {
  const handleKeyDown = useCallback((event) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault()
      onClick?.(event)
    }
  }, [onClick])

  return (
    <button
      type="button"
      onClick={onClick}
      onKeyDown={handleKeyDown}
      disabled={disabled}
      aria-label={ariaLabel}
      aria-disabled={disabled}
      tabIndex={disabled ? -1 : 0}
      className={cn(
        "inline-flex items-center justify-center rounded-md px-4 py-2",
        "text-sm font-medium transition-colors focus-visible:outline-none",
        "focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
        disabled && "pointer-events-none opacity-50",
        className
      )}
      {...props}
    >
      {children}
    </button>
  )
}

// ✅ 폼 접근성
const AccessibleForm = () => {
  return (
    <form>
      <fieldset>
        <legend className="sr-only">사용자 정보 입력</legend>
        
        <div>
          <Label htmlFor="user-email">이메일 주소 *</Label>
          <Input
            id="user-email"
            type="email"
            required
            aria-describedby="email-help email-error"
            aria-invalid={!!errors.email}
          />
          <div id="email-help" className="text-sm text-gray-600">
            로그인에 사용할 이메일 주소를 입력하세요
          </div>
          {errors.email && (
            <div id="email-error" role="alert" className="text-sm text-red-600">
              {errors.email.message}
            </div>
          )}
        </div>
      </fieldset>
    </form>
  )
}
```

### 2. XSS 방지

```jsx
// ✅ 안전한 HTML 렌더링
import DOMPurify from 'dompurify'

const SafeHTMLContent = ({ htmlContent }) => {
  const sanitizedHTML = useMemo(() => {
    return DOMPurify.sanitize(htmlContent)
  }, [htmlContent])

  return (
    <div 
      dangerouslySetInnerHTML={{ __html: sanitizedHTML }}
      className="prose max-w-none"
    />
  )
}

// ✅ 사용자 입력 검증
const UserComment = ({ comment }) => {
  // React는 기본적으로 XSS를 방지하므로 안전
  return <p className="text-gray-700">{comment}</p>
}
```

## 🧪 테스트 작성 규칙

### 1. 컴포넌트 테스트

```jsx
// __tests__/UserProfileCard.test.jsx
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { UserProfileCard } from '../UserProfileCard'

describe('UserProfileCard', () => {
  const mockUser = {
    id: 1,
    email: 'test@example.com',
    nickname: 'testuser',
    isVerified: true
  }

  const mockOnEdit = jest.fn()

  beforeEach(() => {
    jest.clearAllMocks()
  })

  it('사용자 정보를 올바르게 렌더링한다', () => {
    render(<UserProfileCard user={mockUser} onEdit={mockOnEdit} />)
    
    expect(screen.getByText('testuser')).toBeInTheDocument()
    expect(screen.getByText('test@example.com')).toBeInTheDocument()
    expect(screen.getByText('인증됨')).toBeInTheDocument()
  })

  it('편집 버튼 클릭 시 onEdit 콜백을 호출한다', async () => {
    const user = userEvent.setup()
    render(<UserProfileCard user={mockUser} onEdit={mockOnEdit} />)
    
    const editButton = screen.getByRole('button', { name: /프로필 편집/i })
    await user.click(editButton)
    
    expect(mockOnEdit).toHaveBeenCalledWith(mockUser)
  })

  it('키보드 접근성이 작동한다', async () => {
    const user = userEvent.setup()
    render(<UserProfileCard user={mockUser} onEdit={mockOnEdit} />)
    
    const editButton = screen.getByRole('button', { name: /프로필 편집/i })
    editButton.focus()
    await user.keyboard('{Enter}')
    
    expect(mockOnEdit).toHaveBeenCalledWith(mockUser)
  })

  it('사용자 정보가 없을 때 적절한 메시지를 표시한다', () => {
    render(<UserProfileCard user={null} onEdit={mockOnEdit} />)
    
    expect(screen.getByText('사용자 정보가 없습니다')).toBeInTheDocument()
  })
})
```

## 🔧 개발 워크플로우

### 1. 커밋 전 체크리스트

```bash
# 1. 코드 품질 검사
npm run lint              # ESLint 검사
npm run lint:fix          # ESLint 자동 수정
npm run format            # Prettier 포맷팅

# 2. 빌드 테스트
npm run build             # 프로덕션 빌드

# 3. 타입 검사 (TypeScript 사용 시)
npm run type-check        # 타입 검사

# 4. 테스트 실행
npm run test              # 단위 테스트
npm run test:coverage     # 테스트 커버리지

# 5. RTK Query 검증
# - 모든 API 호출이 RTK Query 훅을 사용하는지 확인
# - services/api.js 같은 레거시 모듈이 없는지 확인
# - fetch, axios 직접 사용이 없는지 확인
# - 적절한 캐싱 및 에러 처리가 구현되었는지 확인
```

### 2. 컴포넌트 개발 순서

1. **기본 구조 작성** (props, 기본 렌더링)
2. **상태 관리 추가** (useState, useReducer)
3. **이벤트 핸들러 구현** (useCallback으로 메모이제이션)
4. **성능 최적화** (memo, useMemo 적용)
5. **접근성 속성 추가** (ARIA, 키보드 지원)
6. **에러 처리 구현** (ErrorBoundary, 입력 검증)
7. **스타일링 완성** (TailwindCSS, 반응형)
8. **테스트 작성** (렌더링, 이벤트, 접근성)

## ❌ 금지 사항

### 코드 스타일
- ❌ 클래스 컴포넌트 사용
- ❌ forceUpdate 패턴 사용
- ❌ 인라인 스타일 과도한 사용
- ❌ window.location.reload() 직접 호출
- ❌ document.getElementById() 사용 (ref 사용)

### API 요청
- ❌ fetch, axios, 기타 HTTP 클라이언트 직접 사용
- ❌ services/api.js 같은 레거시 API 모듈 생성
- ❌ RTK Query 없는 API 상태 관리
- ❌ 수동 캐싱 및 로딩 상태 관리

### 성능
- ❌ memo, useCallback, useMemo 없는 컴포넌트
- ❌ prop drilling (Context나 Redux 사용)
- ❌ 불필요한 리렌더링
- ❌ 지연 로딩 없는 큰 컴포넌트

### 접근성
- ❌ alt 속성 없는 이미지
- ❌ aria-label 없는 버튼
- ❌ 키보드 접근성 무시
- ❌ 색상만으로 정보 전달

## ✅ 필수 체크리스트

### 모든 컴포넌트 (기본 요구사항)
- [ ] React.memo로 감싸기
- [ ] useCallback으로 이벤트 핸들러 메모이제이션
- [ ] useMemo로 계산된 값 메모이제이션
- [ ] displayName 설정
- [ ] PropTypes 또는 TypeScript 타입 정의
- [ ] 접근성 속성 추가 (aria-label, tabIndex 등)
- [ ] 키보드 네비게이션 지원
- [ ] 에러 처리 구현
- [ ] 로딩 상태 관리
- [ ] 반응형 디자인 적용 (Mobile First)
- [ ] 테스트 작성
- [ ] Early Return 패턴 적용

### API 통신 컴포넌트 (RTK Query 필수)
- [ ] RTK Query 훅 사용 (useXXXQuery, useXXXMutation)
- [ ] 적절한 캐싱 전략 설정 (keepUnusedDataFor, refetchOnMountOrArgChange)
- [ ] skip 옵션으로 조건부 요청 구현
- [ ] transformResponse로 데이터 정규화
- [ ] 에러 상태 처리 (error.data?.detail)
- [ ] 로딩 상태 구분 (isLoading vs isFetching)
- [ ] Mutation에서 unwrap() 사용
- [ ] 적절한 태그 기반 캐시 무효화

### RTK Query API 모듈
- [ ] baseQueryWithReauth 사용
- [ ] 적절한 tagTypes 정의
- [ ] providesTags와 invalidatesTags 설정
- [ ] 백엔드 스펙에 맞는 엔드포인트 URL
- [ ] 응답 구조에 맞는 transformResponse
- [ ] 적절한 캐싱 시간 설정
- [ ] 페이지네이션 지원 (필요시)
- [ ] 에러 처리 로직

이 규칙들을 엄격히 준수하여 고성능, 접근성, 유지보수성을 모두 갖춘 Weather Flick 프론트엔드를 개발하세요.