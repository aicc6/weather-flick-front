---
description:
globs:
alwaysApply: false
---
# Weather Flick Frontend - Cursor Team Rules

## 프로젝트 개요
Weather Flick 프론트엔드는 React 18과 Vite를 기반으로 한 여행 날씨 서비스입니다.

## 기술 스택
- **Framework**: React 18.3.1
- **Build Tool**: Vite 6.3.5
- **Styling**: Tailwind CSS 4.1.10
- **Router**: React Router DOM 7.6.2
- **UI Components**: Radix UI
- **Animation**: Framer Motion 12.23.0
- **Form**: React Hook Form + Zod
- **State**: React Context + Redux Toolkit

## 코딩 스타일 규칙

### 파일 및 폴더 구조
```
src/
├── components/           # 재사용 가능한 컴포넌트
│   ├── ui/              # 기본 UI 컴포넌트 (Radix UI 기반)
│   └── [feature]/       # 기능별 컴포넌트
├── pages/               # 페이지 컴포넌트
├── layouts/             # 레이아웃 컴포넌트
├── contexts/            # React Context
├── hooks/               # 커스텀 훅
├── services/            # API 및 외부 서비스
├── utils/               # 유틸리티 함수
└── lib/                 # 라이브러리 설정
```

### 명명 규칙
- **컴포넌트**: PascalCase (예: `UserProfile.jsx`)
- **파일명**: kebab-case (예: `user-profile.jsx`)
- **훅**: camelCase, use로 시작 (예: `useAuth.js`)
- **상수**: UPPER_SNAKE_CASE (예: `API_BASE_URL`)
- **변수/함수**: camelCase (예: `getCurrentUser`)

### 컴포넌트 작성 규칙

#### 1. 함수형 컴포넌트 사용
```jsx
// ✅ 좋은 예
const UserProfile = ({ user, onUpdate }) => {
  return <div>{user.name}</div>
}

// ❌ 나쁜 예 - 클래스 컴포넌트 사용 금지
class UserProfile extends Component {
  render() {
    return <div>{this.props.user.name}</div>
  }
}
```

#### 2. 성능 최적화 필수 적용
```jsx
// ✅ 필수: React.memo 사용
const UserCard = memo(({ user, onEdit }) => {
  // ✅ 필수: useCallback으로 함수 메모이제이션
  const handleEdit = useCallback(() => {
    onEdit(user.id)
  }, [user.id, onEdit])

  // ✅ 필수: useMemo로 값 메모이제이션
  const displayName = useMemo(() => {
    return `${user.firstName} ${user.lastName}`
  }, [user.firstName, user.lastName])

  return <div onClick={handleEdit}>{displayName}</div>
})

UserCard.displayName = 'UserCard'
```

#### 3. 코드 스플리팅 적용
```jsx
// ✅ 페이지 컴포넌트는 lazy loading 필수
const ProfilePage = lazy(() =>
  import('./pages/profile').then(module => ({
    default: module.ProfilePage
  }))
)

// ✅ Suspense 래퍼 필수
<Suspense fallback={<LoadingSpinner />}>
  <Routes>
    <Route path="/profile" element={<ProfilePage />} />
  </Routes>
</Suspense>
```

### 스타일링 규칙

#### 1. Tailwind CSS 우선 사용
```jsx
// ✅ Tailwind 클래스 사용
<div className="flex items-center justify-between p-4 bg-white rounded-lg shadow-md">

// ✅ 복잡한 스타일은 CSS Modules 또는 styled-components
<div className={styles.complexComponent}>
```

#### 2. 반응형 디자인 필수
```jsx
// ✅ 모바일 퍼스트 접근
<div className="text-sm md:text-base lg:text-lg">
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
```

### 상태 관리 규칙

#### 1. Context 사용 시 최적화 필수
```jsx
// ✅ 상태 분리 및 메모이제이션
const AuthContext = createContext()

export const AuthProvider = ({ children }) => {
  const [authState, setAuthState] = useState({
    user: null,
    isAuthenticated: false,
    loading: true
  })

  // ✅ 상태 업데이트 함수 메모이제이션
  const updateAuthState = useCallback((updates) => {
    setAuthState(prev => ({ ...prev, ...updates }))
  }, [])

  const value = useMemo(() => ({
    ...authState,
    updateAuthState
  }), [authState, updateAuthState])

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}
```

#### 2. forceUpdate 패턴 금지
```jsx
// ❌ 금지: forceUpdate 패턴
const [, forceUpdate] = useReducer(x => x + 1, 0)

// ✅ 권장: 적절한 상태 관리
const [refreshKey, setRefreshKey] = useState(0)
const handleRefresh = () => setRefreshKey(prev => prev + 1)
```

### API 통신 규칙

#### 1. 에러 처리 필수
```jsx
// ✅ try-catch 및 에러 상태 관리
const useApiCall = () => {
  const [data, setData] = useState(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)

  const fetchData = useCallback(async () => {
    try {
      setLoading(true)
      setError(null)
      const result = await api.getData()
      setData(result)
    } catch (err) {
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }, [])

  return { data, loading, error, fetchData }
}
```

### 폼 처리 규칙

#### 1. React Hook Form + Zod 사용
```jsx
// ✅ Zod 스키마 정의
const userSchema = z.object({
  email: z.string().email('올바른 이메일을 입력하세요'),
  password: z.string().min(8, '비밀번호는 8자 이상이어야 합니다')
})

// ✅ React Hook Form 사용
const UserForm = () => {
  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm({
    resolver: zodResolver(userSchema)
  })

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <input {...register('email')} />
      {errors.email && <span>{errors.email.message}</span>}
    </form>
  )
}
```

### 접근성 규칙

#### 1. ARIA 속성 필수 적용
```jsx
// ✅ 적절한 ARIA 속성
<button
  aria-label="사용자 프로필 편집"
  aria-expanded={isMenuOpen}
  onClick={handleEdit}
>
  편집
</button>

// ✅ 키보드 접근성
<div
  role="button"
  tabIndex={0}
  onKeyDown={handleKeyDown}
  onClick={handleClick}
>
```

### 테스트 규칙

#### 1. 컴포넌트 테스트 작성
```jsx
// ✅ 주요 컴포넌트는 테스트 필수
describe('UserProfile', () => {
  it('사용자 정보를 올바르게 표시한다', () => {
    render(<UserProfile user={mockUser} />)
    expect(screen.getByText(mockUser.name)).toBeInTheDocument()
  })
})
```

### 파일 구조 예시
```
src/components/user/
├── UserProfile.jsx          # 메인 컴포넌트
├── UserAvatar.jsx          # 아바타 컴포넌트
├── UserEditForm.jsx        # 편집 폼
├── index.js                # 배럴 익스포트
└── __tests__/              # 테스트 파일
    ├── UserProfile.test.jsx
    └── UserEditForm.test.jsx
```

## 금지 사항
- ❌ 클래스 컴포넌트 사용
- ❌ forceUpdate 패턴 사용
- ❌ window.location.reload() 직접 호출
- ❌ 인라인 스타일 과도한 사용
- ❌ prop drilling (Context나 Redux 사용)
- ❌ 성능 최적화 없는 대용량 컴포넌트
- ❌ 접근성 무시
- ❌ 타입 체크 없는 props

## 필수 체크리스트
- [ ] 컴포넌트에 React.memo 적용
- [ ] 이벤트 핸들러에 useCallback 적용
- [ ] 계산된 값에 useMemo 적용
- [ ] displayName 설정
- [ ] PropTypes 또는 TypeScript 타입 정의
- [ ] 접근성 속성 추가
- [ ] 반응형 디자인 적용
- [ ] 에러 처리 구현
- [ ] 로딩 상태 관리
- [ ] 테스트 작성

## 빌드 및 배포
```bash
# 개발 서버
npm run dev

# 린트 검사
npm run lint

# 포맷팅
npm run format

# 프로덕션 빌드
npm run build
```

이 규칙들을 준수하여 일관되고 성능 최적화된 코드를 작성하세요.
